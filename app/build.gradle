import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.devtools.ksp' version '1.8.21-1.0.11'
}

android {
    compileSdk 34
    buildToolsVersion = "34.0.0"

    defaultConfig {
        applicationId "com.example.gradleproject"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions = ["api"]

    productFlavors {
        stg {
            dimension "api"
            applicationIdSuffix ".stg"
        }
        prod {
            dimension "api"
        }
    }

//    splits {
//        density {
//            enable true
//
//            exclude "ldpi", "xxhdpi", "xxxhdpi"
//        }
//    }

    bundle {
        density {
            enableSplit = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    namespace 'com.example.gradleproject'
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$core_kotlin_version"
    implementation libraries.core_ui
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espesso_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    ksp "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
}

tasks.register('productFlavor', Copy) { task ->
    def sourceDir = file("${project.projectDir}/libs")
    android.productFlavors.each { productFlavor ->
        def extraFolder = file("${project.buildDir}/productFlavor/${productFlavor.name}")

        if (!extraFolder.exists()) {
            extraFolder.mkdirs()
        }

        sourceDir.listFiles().each { filePath ->
            Files.copy(
                    Paths.get(filePath.path),
                    Paths.get("${extraFolder.path}/${filePath.getName()}"),
                    StandardCopyOption.REPLACE_EXISTING
            )
        }
    }
}