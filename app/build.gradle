import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "com.example.gradleproject"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "api"

    productFlavors {
        stg {
            dimension "api"
            applicationIdSuffix ".stg"
        }
        prod {
            dimension "api"
        }
    }

    splits {
        density {
            enable true

            exclude "ldpi", "xxhdpi", "xxxhdpi"

            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation libraries.core_ui
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
}

task productFlavor(type: Copy) { task ->
    def sourceDir = file("${project.buildDir}/libs")

    android.productFlavors.each { productFlavor ->
        def extraFolder = file("${project.buildDir}/productFlavor/${productFlavor.name}")

        if (!extraFolder.exists()) {
            extraFolder.mkdirs()
        }

        sourceDir.listFiles().each { filePath ->
            Files.copy(
                    Paths.get(filePath.path),
                    Paths.get("${extraFolder.path}/${filePath.getName()}"),
                    StandardCopyOption.REPLACE_EXISTING
            )
        }
    }
}
